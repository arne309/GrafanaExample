[
    {
        "id": "1fe2d4c6.399b2b",
        "type": "influxdb out",
        "z": "cdb7abff.3cf718",
        "influxdb": "abdb688f.914b08",
        "name": "influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Modersohn",
        "bucket": "main",
        "x": 1500,
        "y": 120,
        "wires": []
    },
    {
        "id": "4511fc47.51fb34",
        "type": "ccu-rpc-event",
        "z": "cdb7abff.3cf718",
        "name": "",
        "iface": "HmIP-RF",
        "ccuConfig": "38263145.35ea0e",
        "rooms": "",
        "roomsRx": "str",
        "functions": "",
        "functionsRx": "str",
        "device": "",
        "deviceRx": "str",
        "deviceName": "",
        "deviceNameRx": "str",
        "deviceType": "",
        "deviceTypeRx": "str",
        "channel": "",
        "channelRx": "str",
        "channelName": "",
        "channelNameRx": "str",
        "channelType": "",
        "channelTypeRx": "str",
        "channelIndex": "",
        "channelIndexRx": "str",
        "datapoint": "",
        "datapointRx": "str",
        "change": false,
        "working": false,
        "cache": false,
        "topic": "${CCU}/${Interface}/${channelName}/${datapoint}",
        "x": 1120,
        "y": 120,
        "wires": [
            [
                "5b729f7.d52416",
                "1f999257.d107be"
            ]
        ]
    },
    {
        "id": "5b729f7.d52416",
        "type": "function",
        "z": "cdb7abff.3cf718",
        "name": "",
        "func": "let payload = context.get(\"payload\");\n\n\nlet deviceNameCondition = msg.deviceName!=context.get(\"deviceName\");\nlet dataKnownCondition = msg.ts - context.get(\"ts\") > 1000;\n\nlet ret = undefined;\n\nif(deviceNameCondition || dataKnownCondition)\n{\n    ret = {\n        topic: \"data\",\n        payload: context.get(\"payload\"),\n        measurement: context.get(\"deviceName\"),\n    };\n    payload = {};\n    context.set(\"deviceName\", msg.deviceName);\n    context.set(\"ts\", msg.ts);\n}\n\npayload[msg.datapoint] = msg.value;\ncontext.set(\"payload\", payload);\n\nif(ret!=undefined && ret.measurement.length>0)\n    return ret;\n\n\n\n\n/*\nlet registermessage = 0;\nlet knowndevs = context.get(\"knowndevs\");\nif(knowndevs===undefined) knowndevs = [];\n\nlet deviceName = \"\";\ntry {\n    deviceName = msg.payload.hm.deviceName;\n} catch(e)\n{\n    return;\n}\n\nif(! knowndevs.includes(deviceName))\n{\n    registermessage = {\n        \"topic\": \"v1/gateway/connect\",\n        \"payload\": {\"device\": deviceName}\n    };\n    \n    knowndevs.push(deviceName);\n    context.set(\"knowndevs\", knowndevs);\n}\n\nlet out = { \n    \"topic\": \"v1/gateway/telemetry\",\n    \"payload\": {}\n};\nout.payload[deviceName] = [{\n    \"ts\": msg.payload.ts,\n    \"values\": { }\n}]\nout.payload[deviceName][0][\"values\"][msg.payload.hm.datapoint] = msg.payload.val;\n\nif(registermessage==0) return out;\nelse return [registermessage, out];\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\n// Clear Context\ncontext.set(\"deviceName\",\"\");\ncontext.set(\"payload\", {});\ncontext.set(\"ts\",0);",
        "finalize": "",
        "x": 1300,
        "y": 120,
        "wires": [
            [
                "1fe2d4c6.399b2b",
                "63233083.487c9"
            ]
        ]
    },
    {
        "id": "abdb688f.914b08",
        "type": "influxdb",
        "hostname": "192.168.5.2",
        "port": "8086",
        "protocol": "http",
        "database": "main",
        "name": "N2",
        "usetls": false,
        "tls": "494f9eec.a77938",
        "influxdbVersion": "2.0",
        "url": "http://192.168.5.2:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "38263145.35ea0e",
        "type": "ccu-connection",
        "name": "localhost",
        "host": "localhost",
        "regaEnabled": true,
        "bcrfEnabled": true,
        "iprfEnabled": true,
        "virtEnabled": true,
        "bcwiEnabled": false,
        "cuxdEnabled": false,
        "regaPoll": true,
        "regaInterval": "30",
        "rpcPingTimeout": "60",
        "rpcInitAddress": "127.0.0.1",
        "rpcServerHost": "127.0.0.1",
        "rpcBinPort": "2047",
        "rpcXmlPort": "2048"
    },
    {
        "id": "494f9eec.a77938",
        "type": "tls-config",
        "name": "HmIP_TLS",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "9732bdb778-certificate.pem.crt",
        "keyname": "9732bdb778f1a9df9dd91d36d117d187fa0c3b232a333c4fedfd8deb34ce8b29-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true
    }
]